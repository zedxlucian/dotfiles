#!/usr/bin/env bash

# This script is inspired by HEXDSL's youtube video called [[yt:https://www.youtube.com/watch?v=UEmPboaTDpQ&t=342s][DWM's patching guide]]
# This script provides an interface to patch suckless's softwares. The objectif is to make it easier on the user to try out new patches and use them.

# Variables declarations (change these according to your needs):
DOTFILES="$HOME/.local/src/suckless"
PROJECT_NAME="$(basename "$(pwd)")"
DIFF_DIR="${DOTFILES}/${PROJECT_NAME}_diffs"
OLD_DIFF_DIR="${DOTFILES}/${PROJECT_NAME}_diffs/old"
UL="\033[4m"    # underline
RS="\033[0m"    # reset
FGRN="\033[32m" # foreground green
FYEL="\033[33m" # foreground yellow

# Functions declarations:
color()(set -o pipefail;"$@" 2> >(sed $'s,.*,\e[31m&\e[m,'>&2))

verbose() {
    printf "\n${FYEL}%s${RS}\n" "$1"
}

apply_patch() {
    name=$( echo -e "$1" | sed -e 's/\/.*\///' -e 's/\.diff//' -e 's/dwm\-//' -e 's/\-.*//')
    [ -f "$1" ] &&
    verbose "Switch to branch 'master'"
    branch=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')
    color git checkout -q master &&
    verbose "Create and switch to branch '$name'" &&
    color git checkout -q -b "$name" &&
    verbose "Apply patch : $name"
    color git apply "$1" &&
    verbose "Add and commit"
    color git add -A && color git commit -q -m "Feature: add $name patch"
}

rebase() {
    ARRAY=()
    clean_reset >/dev/null 2>&1 &&
    color git checkout -q -b custom &&
    for branch in $(git for-each-ref --format='%(refname)' refs/heads/ | cut -d'/' -f3); do
        if [ "$branch" != "master" ] && [ "$branch" != "custom" ];then
            ARRAY+=("$branch")
        fi
    done &&
    name=$( echo -e "$1" | sed -e 's/\/.*\///' -e 's/\.diff//' -e 's/dwm\-//' -e 's/\-.*//')
    local arg="$name"; shift
    for item in ${ARRAY[*]}; do
        if [[ "$item" == "$arg" ]]; then
            verbose "Merge $arg to branch 'custom'"
            color git rebase -q --rebase-merges "$item"
        fi
    done
    color git checkout -q master && printf "\n${FGRN}%s${RS}\n" "You can install the software with the -i option now."
}

rebase_all() {
    create_diff &&
    color git checkout -q -b custom &&
    for branch in $(git for-each-ref --format='%(refname)' refs/heads/ | cut -d'/' -f3); do
        if [ "$branch" != "master" ] && [ "$branch" != "custom" ];then
            verbose "Merge $branch to branch 'custom'"
            color git rebase -q --rebase-merges "$branch"
        fi
    done
}

create_diff() {
    color mkdir -p "$OLD_DIFF_DIR" &&
    color mv "$DIFF_DIR"/*.diff "$OLD_DIFF_DIR"  &&
    clean_reset &&
    for branch in $(git for-each-ref --format='%(refname)' refs/heads/ | cut -d'/' -f3); do
        if [ "$branch" != "master" ] && [ "$branch" != "custom" ];then
            color git diff master.."$branch" > "${DIFF_DIR}/${PROJECT_NAME}_${branch}.diff"
        fi
    done
}

apply_custom_diffs() {
    if [ ! -d "$DIFF_DIR" ];then
        verbose "No patches"
        exit 1
    fi
    files="$(ls "$DIFF_DIR"/*.diff)"
    for i in $files; do
        name=$(echo "$i" | sed -e 's/\/.*\///' -e 's/\.diff//' -e "s/${PROJECT_NAME}_//")
        verbose "Switch to branch 'master'"
        color git checkout -q master &&
        verbose "Create and switch to branch '$name'"
        color git checkout -q -b "$name" &&
        verbose "Apply patch : $name"
        color git apply "$i" &&
        verbose "Add and commit"
        color git add -A  && color git commit -q -m "Feature: Add $name patch"
    done
    clean_reset
}

helper() {
    echo -e "${UL}Usage${RS}:"
    echo -e "
   $ satch -[a/d/h/i/m/p/r]
   $ satch -p <path/to/filename.diff> -rm\n
${UL}Options${RS}:
  -a            Apply custom diffs created with '-d' option.
  -d            Create diff of all branches.
  -h            Show this help.
  -i            Install software with make install command.
  -m            Check errors in software with make command.
  -p            Check errors in software with make command.
  -r            Create branch 'custom' and rebase all branches on it.
"
}

clean_reset() {
    [ -f "$HOME/.gitconfig" ] &&
    color git checkout -q master &&
    color make clean &&
    color rm -f config.h && color git reset -q --hard master
}

while getopts "p:adimhr" option; do
    case "${option}" in
        p)
            case $PROJECT_NAME in
                dwm|st|dmenu)
                    if [[ -f "${OPTARG}" ]]; then
                        apply_patch "${OPTARG}" &&
                        rebase "${OPTARG}"
                    else
                        echo -e "E: '${OPTARG}' is not a valid file name."
                        exit 1
                    fi
                    ;;
                *)
                    printf "E: You are currently not in a suckless's software directory.\nRun this script in a suckless's project directory.\n"
                    exit 1
                    ;;
            esac
        ;;
        r)
            case $PROJECT_NAME in
                dwm|st|dmenu)
                    rebase_all
                    ;;
                *)
                    printf "E: You are currently not in a suckless's software directory.\nRun this script in a suckless's project directory.\n"
                    exit 1
                    ;;
            esac
        ;;
        a)
            case $PROJECT_NAME in
                dwm|st|dmenu)
                    clean_reset && apply_custom_diffs
                    ;;
                *)
                    printf "E: You are currently not in a suckless's software directory.\nRun this script in a suckless's project directory.\n"
                    exit 1
                    ;;
            esac
        ;;
        i)
            case $PROJECT_NAME in
                dwm|st|dmenu)
                    sudo make install
                    clean_reset && git branch -q -D custom
                    ;;
                *)
                    printf "E: You are currently not in a suckless's software directory.\nRun this script in a suckless's project directory.\n"
                    exit 1
                    ;;
            esac
        ;;
        m)
            case $PROJECT_NAME in
                dwm|st|dmenu)
                    make
                    ;;
                *)
                    printf "E: You are currently not in a suckless's software directory.\nRun this script in a suckless's project directory.\n"
                    exit 1
                    ;;
            esac
        ;;
        d)
            case $PROJECT_NAME in
                dwm|st|dmenu)
                    create_diff
                    ;;
                *)
                    printf "E: You are currently not in a suckless's software directory.\nRun this script in a suckless's project directory.\n"
                    exit 1
                    ;;
            esac
        ;;
        h)
            helper
            ;;
        *)
            echo -e -e "E: Invalid option '$1'\n"
            helper
            exit 1
            ;;
    esac
done
